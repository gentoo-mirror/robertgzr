#!/bin/sh

set -e
[ -n "$DEBUG" ] && set -x

if [ "$1" = "-h" ]; then
    printf "usage: %s [-e] NEW_VERSION\n" "$(basename "$0")"
    exit 1
fi

edit=
if [ "$1" = "-e" ]; then
    edit=1
    shift
fi

log() {
    printf "$(tput setaf 6)[${pkgname}]$(tput sgr0) %s\n" "$@"
}


done=
trap '{ [ -z "${done}" ] && { log "cleaning up ${newebuild}" && rename ebuild ebuild.rej "${newebuild}"; }; }' EXIT

newversion="${1:?missing new version}"
pkgname="$(basename $(dirname "${PWD}"))/$(basename "${PWD}")"

oldebuild=$(find . -type f -name \*.ebuild -print -quit)
oldversion=$(printf "${oldebuild}" | rev | cut -d\- -f1 | cut -d\. -f2- | rev)
newebuild=$(printf "${oldebuild}" | sed -e "s/${oldversion}/${newversion}/")

log "new ebuild ${newversion}"

cp -v "${oldebuild}" "${newebuild}"
[ -n "${edit}" ] && exec $EDITOR "${newebuild}"

log "updating manifest"

ebuild "${newebuild}" manifest

olderebuilds=$(find . -type f -name \*.ebuild -print | sort | grep -v "${oldebuild}" | grep -v "${newebuild}")
num_olderebuilds=$(printf "${olderebuilds}" | wc -l)
if [ "${num_olderebuilds}" -gt 0 ]; then
    log "there is ${num_olderebuilds} ebuilds, you should drop some..."
    set -x
    for eb in ${olderebuilds}; do
        printf "drop $eb ? (y/n) "
        read -r yn
        [ "$yn" = "y" ] && rm "$eb" || true
    done
fi

log "creating commit"

if [ -n "$(git diff --staged --name-only)" ]; then
    log "error: staging not clear"
    git status -s --untracked-files=no
    exit 1
fi
git add "${newebuild}" Manifest
git commit -m "${pkgname}: bump to ${newversion}" || git reset . >/dev/null

done=1
log "done"
