#!/bin/sh

set -e
[ -n "$DEBUG" ] && set -x

if [ "$1" = "-h" ]; then
    printf "usage: %s [-e] NEW_VERSION\n" "$(basename "$0")"
    exit 1
fi

edit=
if [ "$1" = "-e" ]; then
    edit=1
    shift
fi

log() {
    printf "$(tput setaf 6)[${pkgname}]$(tput sgr0) %s\n" "$@"
}

cleanup() {
    [ -n "${done}" ] && return
    log "cleaning up ${new_ebd}"
    mv "${new_ebd}" "${new_ebd}.rej"
}

done=
trap '{ cleanup; }' EXIT

new_ver="${1:?missing new version}"
pkgname="$(basename "$(dirname "${PWD}")")"/"$(basename "${PWD}")"

old_ebd=$(find . -type f -name \*.ebuild -print | sort | tail -n1)
old_ver=$(printf "%s" "${old_ebd}" | rev | cut -d"-" -f1 | cut -d"." -f2- | rev)
new_ebd=$(printf "%s" "${old_ebd}" | sed -e "s/${old_ver}/${new_ver}/")

log "new ebuild ${new_ver}"
cp -v "${old_ebd}" "${new_ebd}"
[ -n "${edit}" ] && exec "${EDITOR}" "${new_ebd}"

old_ebds=$(find . -type f -name \*.ebuild -print | sort | grep -v "${new_ebd}")
n=$(printf "%s" "${old_ebds}" | wc -l)
dropped=
if [ "${n}" -gt 0 ]; then
    log "there is ${n} ebuilds, you should drop some..."
    for e in ${old_ebds}; do
        printf "drop %s ? (y/n) " "${e}"
        read -r yn
        if [ "$yn" != "y" ]; then
            continue
        fi
        dropped="${dropped}${e} "
        rm "$e"
    done
fi

log "updating manifest"
doas ebuild "${new_ebd}" manifest

log "creating commit"
if [ -n "$(git diff --staged --name-only)" ]; then
    log "error: staging not clear"
    git status -s --untracked-files=no
    exit 1
fi

set -x
git add "${new_ebd}"
git add Manifest 2>/dev/null || true
[ -n "${dropped}" ] && git rm ${dropped}
git commit -m "${pkgname}: bump to ${new_ver}" || git reset . >/dev/null
set +x

done=1
log "done"
