From cfbee71ec3a58eb438a90ef7c43ffd4775de1849 Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 12:41:53 +0100
Subject: [PATCH 1/6] feat: add option for shell-escape working dir

---
 crates/docmodel/src/document.rs | 15 +++++++++++++++
 src/docmodel.rs                 |  6 +++++-
 src/driver.rs                   |  4 +++-
 src/unstable_opts.rs            |  7 +++++++
 4 files changed, 30 insertions(+), 2 deletions(-)

diff --git a/crates/docmodel/src/document.rs b/crates/docmodel/src/document.rs
index 845f2f1b6..efa61d54e 100644
--- a/crates/docmodel/src/document.rs
+++ b/crates/docmodel/src/document.rs
@@ -221,6 +221,16 @@ pub struct OutputProfile {
     /// shell-escape opens enormous security holes. It should only ever be
     /// activated with fully trusted input.
     pub shell_escape: bool,
+
+    /// Directory to use as the cwd for shell escaped execution.
+    ///
+    /// Setting this to $(pwd) gives the same relative path shell-escape behaviour
+    /// (e.g. for \inputminted), as other engines, such as xelatex
+    ///
+    /// Directory is not managed and any files created in it will not be deleted.
+    ///
+    /// Only meaningful when shell_escape = true.
+    pub shell_escape_cwd: Option<String>,
 }
 
 /// The output target type of a document build.
@@ -295,6 +305,7 @@ pub(crate) fn default_outputs() -> HashMap<String, OutputProfile> {
             index_file: DEFAULT_INDEX_FILE.to_owned(),
             postamble_file: DEFAULT_POSTAMBLE_FILE.to_owned(),
             shell_escape: false,
+            shell_escape_cwd: None,
         },
     );
     outputs
@@ -335,6 +346,7 @@ mod syntax {
         #[serde(rename = "postamble")]
         pub postamble_file: Option<String>,
         pub shell_escape: Option<bool>,
+        pub shell_escape_cwd: Option<String>,
     }
 
     impl OutputProfile {
@@ -364,6 +376,7 @@ mod syntax {
             };
 
             let shell_escape = if !rt.shell_escape { None } else { Some(true) };
+            let shell_escape_cwd = rt.shell_escape_cwd.clone();
 
             OutputProfile {
                 name: rt.name.clone(),
@@ -373,6 +386,7 @@ mod syntax {
                 index_file,
                 postamble_file,
                 shell_escape,
+                shell_escape_cwd,
             }
         }
 
@@ -399,6 +413,7 @@ mod syntax {
                     .clone()
                     .unwrap_or_else(|| DEFAULT_POSTAMBLE_FILE.to_owned()),
                 shell_escape: self.shell_escape.unwrap_or_default(),
+                shell_escape_cwd: self.shell_escape_cwd.clone(),
             }
         }
     }
diff --git a/src/docmodel.rs b/src/docmodel.rs
index c32691d55..e3d232ee8 100644
--- a/src/docmodel.rs
+++ b/src/docmodel.rs
@@ -164,7 +164,11 @@ impl DocumentExt for Document {
 
         if profile.shell_escape {
             // For now, this is the only option we allow.
-            sess_builder.shell_escape_with_temp_dir();
+            if let Some(cwd) = &profile.shell_escape_cwd {
+                sess_builder.shell_escape_with_work_dir(cwd);
+            } else {
+                sess_builder.shell_escape_with_temp_dir();
+            }
         }
 
         if setup_options.only_cached {
diff --git a/src/driver.rs b/src/driver.rs
index a8a957513..52b3406f4 100644
--- a/src/driver.rs
+++ b/src/driver.rs
@@ -1159,7 +1159,9 @@ impl ProcessingSessionBuilder {
         } else {
             match self.shell_escape_mode {
                 ShellEscapeMode::Defaulted => {
-                    if self.unstables.shell_escape {
+                    if let Some(ref cwd) = self.unstables.shell_escape_cwd {
+                        ShellEscapeMode::ExternallyManagedDir(cwd.into())
+                    } else if self.unstables.shell_escape {
                         ShellEscapeMode::TempDir
                     } else {
                         ShellEscapeMode::Disabled
diff --git a/src/unstable_opts.rs b/src/unstable_opts.rs
index 2834624b0..986289a56 100644
--- a/src/unstable_opts.rs
+++ b/src/unstable_opts.rs
@@ -37,6 +37,7 @@ pub enum UnstableArg {
     PaperSize(String),
     SearchPath(PathBuf),
     ShellEscapeEnabled,
+    ShellEscapeCwd(String),
 }
 
 impl FromStr for UnstableArg {
@@ -90,6 +91,10 @@ impl FromStr for UnstableArg {
 
             "shell-escape" => require_no_value(value, UnstableArg::ShellEscapeEnabled),
 
+            "shell-escape-cwd" => {
+                require_value("path").map(|s| UnstableArg::ShellEscapeCwd(s.to_string()))
+            }
+
             _ => Err(format!("Unknown unstable option '{}'", arg).into()),
         }
     }
@@ -102,6 +107,7 @@ pub struct UnstableOptions {
     pub shell_escape: bool,
     pub min_crossrefs: Option<i32>,
     pub extra_search_paths: Vec<PathBuf>,
+    pub shell_escape_cwd: Option<String>,
 }
 
 impl UnstableOptions {
@@ -123,6 +129,7 @@ impl UnstableOptions {
                 PaperSize(size) => opts.paper_size = Some(size),
                 ShellEscapeEnabled => opts.shell_escape = true,
                 SearchPath(p) => opts.extra_search_paths.push(p),
+                ShellEscapeCwd(p) => opts.shell_escape_cwd = Some(p),
             }
         }
 

From 69a6c8de2ddddd1bf3952090141524f244228d9b Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 13:17:24 +0100
Subject: [PATCH 2/6] chore(tests): add test for shell_escape_cwd

---
 tests/tex-outputs.rs | 16 ++++++++++++++++
 1 file changed, 16 insertions(+)

diff --git a/tests/tex-outputs.rs b/tests/tex-outputs.rs
index d13a92421..ec2e4d2aa 100644
--- a/tests/tex-outputs.rs
+++ b/tests/tex-outputs.rs
@@ -14,6 +14,7 @@ use tectonic::{TexEngine, XdvipdfmxEngine};
 use tectonic_bridge_core::{CoreBridgeLauncher, MinimalDriver};
 use tectonic_errors::{anyhow::anyhow, Result};
 use tectonic_status_base::NoopStatusBackend;
+use tempfile::TempDir;
 
 #[path = "util/mod.rs"]
 mod util;
@@ -266,6 +267,21 @@ fn shell_escape() {
         .go()
 }
 
+#[test]
+fn shell_escape_cwd() {
+    let tmpdir = TempDir::new().unwrap();
+    let tmppath = Some(tmpdir.into_path().into_os_string().into_string().unwrap());
+    let unstables = tectonic::unstable_opts::UnstableOptions {
+        shell_escape: true,
+        shell_escape_cwd: tmppath,
+        ..Default::default()
+    };
+    TestCase::new("shell_escape_cwd")
+        .with_unstables(unstables)
+        .check_pdf(true)
+        .go()
+}
+
 #[test]
 fn no_shell_escape() {
     let unstables = tectonic::unstable_opts::UnstableOptions {

From a88a0418a9c3c559d023d9b1da9b03fce3a469e5 Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 14:00:32 +0100
Subject: [PATCH 3/6] fix: make shell-shell-cwd imply shell-escape

---
 crates/docmodel/src/document.rs | 1 -
 src/unstable_opts.rs            | 5 ++++-
 2 files changed, 4 insertions(+), 2 deletions(-)

diff --git a/crates/docmodel/src/document.rs b/crates/docmodel/src/document.rs
index efa61d54e..26959b798 100644
--- a/crates/docmodel/src/document.rs
+++ b/crates/docmodel/src/document.rs
@@ -229,7 +229,6 @@ pub struct OutputProfile {
     ///
     /// Directory is not managed and any files created in it will not be deleted.
     ///
-    /// Only meaningful when shell_escape = true.
     pub shell_escape_cwd: Option<String>,
 }
 
diff --git a/src/unstable_opts.rs b/src/unstable_opts.rs
index 986289a56..41d9f48e6 100644
--- a/src/unstable_opts.rs
+++ b/src/unstable_opts.rs
@@ -129,7 +129,10 @@ impl UnstableOptions {
                 PaperSize(size) => opts.paper_size = Some(size),
                 ShellEscapeEnabled => opts.shell_escape = true,
                 SearchPath(p) => opts.extra_search_paths.push(p),
-                ShellEscapeCwd(p) => opts.shell_escape_cwd = Some(p),
+                ShellEscapeCwd(p) => {
+                    opts.shell_escape_cwd = Some(p);
+                    opts.shell_escape = true;
+                }
             }
         }
 

From 673f106c4c1cd4df261138ec01f95f0d932bb4eb Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 14:06:42 +0100
Subject: [PATCH 4/6] chore: add docs

---
 docs/src/v2cli/compile.md | 1 +
 src/unstable_opts.rs      | 3 +++
 2 files changed, 4 insertions(+)

diff --git a/docs/src/v2cli/compile.md b/docs/src/v2cli/compile.md
index a93306712..c939f8575 100644
--- a/docs/src/v2cli/compile.md
+++ b/docs/src/v2cli/compile.md
@@ -133,3 +133,4 @@ the set of unstable options is subject to change at any time.
 | `-Z paper-size=<spec>`   | Change the initial paper size. Default: `letter` |
 | `-Z search-path=<path>`  | Also look in `<path>` for files (unless `--untrusted` has been specified), like TEXINPUTS. Can be specified multiple times. |
 | `-Z shell-escape`        | Enable `\write18` (unless `--untrusted` has been specified) |
+| `-Z shell-escape-cwd=<path>` | Working directory to use for \write18. Use $(pwd) for same behaviour as most other engines (e.g. for relative paths in \inputminted). Implies -Z shell-escape |
diff --git a/src/unstable_opts.rs b/src/unstable_opts.rs
index 41d9f48e6..297cfd88d 100644
--- a/src/unstable_opts.rs
+++ b/src/unstable_opts.rs
@@ -26,6 +26,9 @@ const HELPMSG: &str = r#"Available unstable options:
     -Z search-path=<path>       Also look in <path> for files, like TEXINPUTS. Can be specified
                                     multiple times.
     -Z shell-escape             Enable \write18
+    -Z shell-escape-cwd         Working directory to use for \write18. Use $(pwd) for same behaviour as
+                                    most other engines (e.g. for relative paths in \inputminted).
+                                    Implies -Z shell-escape
 "#;
 
 // Each entry of this should correspond to a field of UnstableOptions.

From 7b5f14fb6deaaa1be953b413ffc2d201f35a98cd Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 15:26:11 +0100
Subject: [PATCH 5/6] chore: remove test case for shell_escape_cwd

---
 tests/tex-outputs.rs | 16 +---------------
 1 file changed, 1 insertion(+), 15 deletions(-)

diff --git a/tests/tex-outputs.rs b/tests/tex-outputs.rs
index ec2e4d2aa..400a93db7 100644
--- a/tests/tex-outputs.rs
+++ b/tests/tex-outputs.rs
@@ -2,6 +2,7 @@
 // Licensed under the MIT License.
 
 use std::collections::HashSet;
+use std::fs::File;
 use std::path::Path;
 use std::time;
 
@@ -267,21 +268,6 @@ fn shell_escape() {
         .go()
 }
 
-#[test]
-fn shell_escape_cwd() {
-    let tmpdir = TempDir::new().unwrap();
-    let tmppath = Some(tmpdir.into_path().into_os_string().into_string().unwrap());
-    let unstables = tectonic::unstable_opts::UnstableOptions {
-        shell_escape: true,
-        shell_escape_cwd: tmppath,
-        ..Default::default()
-    };
-    TestCase::new("shell_escape_cwd")
-        .with_unstables(unstables)
-        .check_pdf(true)
-        .go()
-}
-
 #[test]
 fn no_shell_escape() {
     let unstables = tectonic::unstable_opts::UnstableOptions {

From 4f3b36daafb83b0756b52aa26d560143b7e9c0df Mon Sep 17 00:00:00 2001
From: Natasha England-Elbro <ashenglandelbro@protonmail.com>
Date: Sat, 25 Jun 2022 15:32:22 +0100
Subject: [PATCH 6/6] chore: remove unused imports

---
 tests/tex-outputs.rs | 2 --
 1 file changed, 2 deletions(-)

diff --git a/tests/tex-outputs.rs b/tests/tex-outputs.rs
index 400a93db7..d13a92421 100644
--- a/tests/tex-outputs.rs
+++ b/tests/tex-outputs.rs
@@ -2,7 +2,6 @@
 // Licensed under the MIT License.
 
 use std::collections::HashSet;
-use std::fs::File;
 use std::path::Path;
 use std::time;
 
@@ -15,7 +14,6 @@ use tectonic::{TexEngine, XdvipdfmxEngine};
 use tectonic_bridge_core::{CoreBridgeLauncher, MinimalDriver};
 use tectonic_errors::{anyhow::anyhow, Result};
 use tectonic_status_base::NoopStatusBackend;
-use tempfile::TempDir;
 
 #[path = "util/mod.rs"]
 mod util;
